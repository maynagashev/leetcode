package main

import "fmt"

func main() {
	a := "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
	b := "1"
	fmt.Println(addBinary(a, b))
}

func addBinary(a string, b string) string {

	ptr1 := len(a) - 1
	ptr2 := len(b) - 1

	var maxI int
	if ptr1 >= ptr2 {
		maxI = ptr1
	} else {
		maxI = ptr2
	}

	res := make([]byte, maxI+1)

	var carry byte
	var current byte
	var j int
	for i := maxI; i >= 0; i, j, ptr1, ptr2 = i-1, j+1, ptr1-1, ptr2-1 {
		current = val(a, ptr1) + val(b, ptr2) + carry
		fmt.Printf("i=%d. %d + %d + %d = %v\n", i, val(a, ptr1), val(b, ptr2), carry, current)
		if current > 1 {
			current = current % 2
			carry = 1
		} else {
			carry = 0
		}

		if current == 1 {
			res[j] = '1'
		} else {
			res[j] = '0'
		}
		fmt.Printf("i=%d. j=%d, current=%v, carry %v, res[j]=%v\n", i, j, current, carry, res[j])
	}

	if carry > 0 {
		res = append(res, '1')
	}
	fmt.Printf("%v", res)
	reverseBytes(res)
	// fmt.Printf("%v carry %v", res, carry)

	return string(res)
}

func val(str string, i int) byte {
	if i < 0 || i >= len(str) || str[i] == '0' {
		return 0
	}
	return 1
}

func reverseBytes(slice []byte) {
	for i, j := 0, len(slice)-1; i < j; i, j = i+1, j-1 {
		slice[i], slice[j] = slice[j], slice[i]
	}
}
